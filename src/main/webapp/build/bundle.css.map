{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "RecommendationRound.svelte",
    "VotingMovie.svelte",
    "VotingRound.svelte",
    "WatchingMovie.svelte",
    "WatchingRound.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport LoginPage from './LoginPage.svelte'\n\timport Round from './Round.svelte'\n\timport { userId } from './stores/userIdStore'\n</script>\n\n{#if $userId}\n\t<button on:click={userId.logout}>Logout</button>\n\t<Round/>\n{:else}\n\t<LoginPage on:loggedIn={event => userId.update(event.detail)}/>\n{/if}\n\n<style>\n\t:global(body) {\n\t\tbackground-color: #17141d;\n\t\tcolor: white;\n\t}\n</style>",
    "<script>\n    import { getStreams, makeRecommendation } from './service'\n    import { round } from './stores/roundStore'\n\n    export let userMovie\n    export let tooManyPeopleAlreadyWatched\n\n    let title = userMovie?.title\n    let selectedStream = userMovie?.stream\n    let streams = []\n    let errorMessage\n    let submitting = false\n    $: disabled = !selectedStream || !title || (userMovie?.title === title && userMovie?.stream === selectedStream)\n\n    getStreams()\n        .then(streamList => streams = streamList)\n        .catch(error => errorMessage = error)\n\n    async function submitRecommendation() {\n        try {\n            submitting = true\n            await makeRecommendation(userMovie?.id, title, selectedStream)\n            userMovie = { title, stream: selectedStream }\n            round.forceUpdate()\n        } catch (e) {\n            errorMessage = e.message\n        } finally {\n            submitting = false\n        }\n    }\n</script>\n\n<form on:submit|preventDefault={submitRecommendation}>\n    {#if tooManyPeopleAlreadyWatched}\n        <h2>Muitas pessoas jÃ¡ viram esse filme, escolha outro</h2>\n    {/if}\n\n    <label for=\"movie-title\">TÃ­tulo</label>\n    <input id=\"movie-title\" autocomplete=\"off\" type=\"text\" autofocus bind:value={title} on:change={() => title = title?.trim()}>\n\n    <label for=\"movie-stream\">Stream</label>\n    <select id=\"movie-stream\" bind:value={selectedStream}>\n        <option disabled value=\"\">Escolha um stream</option>\n        {#each streams as stream}\n            <option value={stream}>\n                {stream}\n            </option>\n        {/each}\n    </select>\n\n    {#if !submitting}\n        <button type=\"submit\" {disabled}>\n            {#if userMovie}\n                Editar\n            {:else}\n                Recommendar\n            {/if}\n        </button>\n    {:else}\n        <button>Enviando...</button>\n    {/if}\n\n    {#if userMovie && !tooManyPeopleAlreadyWatched}\n        <p>Sua recomendaÃ§Ã£o jÃ¡ foi feita. VocÃª pode editÃ¡-la se quiser</p>\n    {/if}\n\n    {#if errorMessage}\n        <p class=\"error\">{errorMessage}</p>\n    {/if}\n</form>\n\n<div class=\"dark-container\">\n    <h2 class=\"title\">Quem falta recomendar?</h2>\n\n    {#if $round.usersPendingRecommendation.length > 0}\n        <ul>\n            {#each $round.usersPendingRecommendation as userName}\n                <li>{userName}</li>\n            {/each}\n        </ul>\n    {/if}\n</div>\n\n<style>\n    form {\n        height: fit-content;\n    }\n\n    .dark-container {\n        background-color: #132828b5;\n        height: fit-content;\n    }\n\n    .title {\n        font-size: 18px;\n    }\n</style>",
    "<script>\n    import { userId } from './stores/userIdStore'\n    import { round } from './stores/roundStore'\n    import { vote } from './service'\n\n    export let movie\n\n    let watched = movie?.movieVisualizations?.find(information => information.userId === $userId)?.watchedBeforeRound\n    $: totalUsersVoted = movie?.movieVisualizations?.filter(watchInformation => watchInformation.watchedBeforeRound !== null)?.length || 0\n    $: isOwnPersonMovie = movie?.userId === $userId\n\n    async function changed() {\n        await vote($userId, movie.title, watched)\n        round.forceUpdate()\n    }\n</script>\n<div class=\"card\">\n    <span class=\"title\">\n        {movie.title}\n    </span>\n    <span class=\"stream\">\n        {movie.stream}\n    </span>\n    {#if !isOwnPersonMovie}\n    <div class=\"choices\">\n        <label>\n            <input type=\"radio\" bind:group={watched} on:change={changed} value={true}>\n            JÃ¡ vi ðŸ˜“\n        </label>\n        <label>\n            <input type=\"radio\" bind:group={watched} on:change={changed} value={false}>\n            Ainda nÃ£o vi ðŸ˜€\n        </label>\n    </div>\n    {/if}\n</div>\n\n<style>\n    .card {\n        position: relative;\n        margin: 10px;\n        display: flex;\n        flex-direction: column;\n        height: 100px;\n        width: 220px;\n        padding: 1.5em;\n        border-radius: 16px;\n        background: #4e326a;\n        box-shadow: 0 0.1rem 3rem #000;\n       }\n\n    .title {\n        display: block;\n        font-weight: bold;\n    }\n\n    .stream {\n        font-size: 0.7em;\n    }\n\n    .choices {\n        margin-top: 18px;\n    }\n</style>",
    "<script>\n    import VotingMovie from './VotingMovie.svelte'\n\n    export let movies\n</script>\n\n<div class=\"voting-card-list\">\n    <h2>Filmes para votar</h2>\n    <div class=\"cards-container\">\n        {#each movies as movie (movie.title)}\n            <VotingMovie {movie}/>\n        {/each}\n    </div>\n</div>\n\n<style>\n    .voting-card-list {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        background-color: #000000ba;\n        height: 80%;\n    }\n\n    .cards-container {\n        height: 100%;\n        overflow: scroll;\n    }\n</style>",
    "<script>\n    import { userId } from './stores/userIdStore'\n    import { round } from './stores/roundStore'\n    import { toggleWatched } from './service'\n\n    export let movie\n\n    let watched = movie.movieVisualizations.find(it => it.userId === $userId)?.watchedDuringRound\n\n    async function changed() {\n        await toggleWatched($userId, movie.title, watched)\n        round.forceUpdate()\n    }\n</script>\n<div class=\"card\">\n    <span class=\"title\">\n        {movie.title}\n    </span>\n    <span class=\"stream\">\n        {movie.stream}\n    </span>\n    <span class=\"stream\">\n        {movie.watchedTotal}/{$round.totalPeople}\n    </span>\n    <span class=\"watched\">\n        Assistido\n        <input type=checkbox bind:checked={watched} on:change={changed}>\n    </span>\n</div>\n\n<style>\n    .card {\n        position: relative;\n        margin: 10px;\n        display: flex;\n        flex-direction: column;\n        height: 50px;\n        width: 220px;\n        padding: 1.5em;\n        border-radius: 16px;\n        background: #4e326a;\n        box-shadow: 0 0.1rem 3rem #000;\n       }\n\n    .title {\n        display: block;\n        font-weight: bold;\n    }\n\n    .stream {\n        /*font-size: 0.7em;*/\n    }\n\n    .watched {\n        margin-top: 10px;\n        position: absolute;\n        right: 10px;\n    }\n</style>",
    "<script>\n    import WatchingMovie from './WatchingMovie.svelte'\n\n    export let movies\n</script>\n\n<div class=\"voting-card-list\">\n    <h2>Filmes para assistir</h2>\n\n    <div class=\"cards-container\">\n        {#each movies.sort((movie1, movie2) => movie1.watchOrder - movie2.watchOrder) as movie (movie.title)}\n            <WatchingMovie {movie}/>\n        {/each}\n    </div>\n</div>\n\n<style>\n    .voting-card-list {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        background-color: #000000ba;\n        height: 80%;\n    }\n\n    .cards-container {\n        height: 100%;\n        overflow: scroll;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AAcS,IAAI,AAAE,CAAC,AACd,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,AACb,CAAC;ACmEE,IAAI,cAAC,CAAC,AACF,MAAM,CAAE,WAAW,AACvB,CAAC,AAED,eAAe,cAAC,CAAC,AACb,gBAAgB,CAAE,SAAS,CAC3B,MAAM,CAAE,WAAW,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACnB,CAAC;ACzDD,KAAK,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,OAAO,CACnB,UAAU,CAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,AAC/B,CAAC,AAEJ,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,KAAK,CACd,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,OAAO,cAAC,CAAC,AACL,SAAS,CAAE,KAAK,AACpB,CAAC,AAED,QAAQ,cAAC,CAAC,AACN,UAAU,CAAE,IAAI,AACpB,CAAC;AC9CD,iBAAiB,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,SAAS,CAC3B,MAAM,CAAE,GAAG,AACf,CAAC,AAED,gBAAgB,cAAC,CAAC,AACd,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,MAAM,AACpB,CAAC;ACID,KAAK,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,OAAO,CACnB,UAAU,CAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,AAC/B,CAAC,AAEJ,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,KAAK,CACd,WAAW,CAAE,IAAI,AACrB,CAAC,AAMD,QAAQ,cAAC,CAAC,AACN,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,AACf,CAAC;ACxCD,iBAAiB,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,SAAS,CAC3B,MAAM,CAAE,GAAG,AACf,CAAC,AAED,gBAAgB,cAAC,CAAC,AACd,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,MAAM,AACpB,CAAC"
}